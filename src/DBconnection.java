
import java.io.InputStream;
import java.util.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;


public class DBconnection {
	private String dbURL;
	private String serverID;
	private String port;
	private String dbName;
	private String username;
	private String password;
	private boolean isConnected;
	String theResult;
	ArrayList<ArrayList<String>> data = new ArrayList<ArrayList<String>>();
	ArrayList<String> colNames = new ArrayList<String>(); 

	
	String[] Drivers = { "oracle.jdbc.driver.OracleDriver",
									"com.mysql.jdbc.Driver"	};
	
//  A connection (session) with a specific database. SQL statements are 
//  executed and results are returned within the context of a connection.
    private Connection theCoennection;
	
//  An object that represents a precompiled SQL statement.
//  A SQL statement is precompiled and stored in a PreparedStatement object. 
//  This object can then be used to efficiently execute this statement multiple times.    
    private PreparedStatement theStatement;
    public String theQuery="";
    
//  A table of data representing a database result set, which is usually generated by 
//  executing a statement that queries the database.
//  A ResultSet object maintains a cursor pointing to its current row of data. 
//  Initially the cursor is positioned before the first row. The next() method moves 
//  the cursor to the next row, and because it returns false when there are no more rows 
//  in the ResultSet object, it can be used in a while loop to iterate through the result set.       
    private ResultSet theResultSet;
    
//  An object that can be used to get information about the types and properties of the 
//  columns in a ResultSet object. 
  ResultSetMetaData resultSetMetadata;
      
	// ################### MUTATORS ##################
	public void setdbURL(String s){ this.dbURL = s; }
	public void setServerID(String s){ this.serverID = s; }
	public void setPort(String s){ this.port = s; }
	public void setDbName(String s){ this.dbName = s; }
	public void setUsername(String s){ this.username = s; }
	public void setPassword(String s){ this.password = s; }
	public void clearResults(){ 
		this.data.clear(); 
		this.colNames.clear(); }
	
	// ################### ACCESSORS ##################
	public String getDbURL(){ return this.dbURL; }
	public String getServerID(){ return this.serverID; }
	public String getPort(){ return this.port; }
	public String getDbName(){ return this.dbName; }
	public String getUsername(){ return this.username; }
	public String getPassword(){ return this.password; }
	public boolean isConnected(){return this.isConnected; }

	// ###################### 	CONSTRUCTORS FOR A CONNECTION #########################
	public DBconnection(){
		this.dbURL="";
		this.serverID="";
		this.port="";
		this.dbName="";
		this.username="";
		this.password="";
		this.isConnected = false;
		this.theResult = "";
		}
	public DBconnection(String theURL,String theUserName, String thePassword ){
		this.dbURL=theURL;
		this.username=theUserName;
		this.password=thePassword;
		}
	public DBconnection(String theServerID, String thePort, String theDBname, String theUsername, String thePassword){
		this.serverID=theServerID;
		this.port=thePort;
		this.dbName=theDBname;
		this.username=theUsername;
		this.password=thePassword;
		}
	//##################### DATABASE CONNECTION FUNCTIONS ######################
	Scanner keyboard = new Scanner(System.in);
	
	// Loads the specified Driver to make the connection to the database
	// Return True if the driver is successfully loaded. False otherwise
	public boolean loadDriver(String driverName){
    	boolean flag = true;
    	
        try {	Class.forName(driverName).newInstance(); /*System.out.println("ConnectionDriver Loaded Successfully!");*/	}
        catch (Exception e) {
            System.out.println("Could not load connection Driver!");
            flag = false;	}
		
        return flag; 
		}
	// Get user Credentials and the Database information to access the database
	 public void requestDatabaseInfoByParts(){
		 System.out.print("\nServer ID:");
		 this.serverID = keyboard.nextLine();
		 
		 System.out.print("Port: ");
		 this.port = keyboard.nextLine();
		 
		 System.out.print("Database Name: ");
		 this.dbName = keyboard.nextLine();
		 

		 
		 System.out.print("Username: ");
		 this.username = keyboard.nextLine();
		 
		 System.out.print("Password: ");
		 this.password = keyboard.nextLine();
	 	}


	
	 public boolean connect(){
		 //Create URL based on the information provided
		 //URL:  jdbc:mysql://127.0.0.1:3316/openmrs
		 //this.dbURL = "jdbc:mysql://"+this.serverID +":" + this.port + "/"+this.dbName;
		 
	        try {
	            this.theCoennection = DriverManager.getConnection(this.dbURL, this.username, this.password);
	   	     	System.out.println("Successful Connection!");	
	   	     	this.isConnected = true;
	        }
	        catch (SQLException e) {
	        	System.out.println(e.getMessage());
	        	this.isConnected = false;
	   	     	System.out.println("Connection Failed!");
	   	     	System.out.println(this.dbURL);
	   	     	System.out.println(this.username);
	   	     	System.out.println(this.password);
	        	}
	     return this.isConnected;
	 	}


	 public boolean disconnect(){
		 boolean flag = true;
		 try { 
			 this.theCoennection.close();
			 this.theResultSet.close();
			 this.theStatement.close();
			 System.out.println("Session Ended!");} 
         catch (SQLException e) { 
        	 flag = false; 
        	 System.out.println("Cannot disconnect!");
        	 };
         
         return flag;
	 }
	 
	 
	 public String requestQuery(){
		 System.out.print("\n   Query-> ");
		 this.theQuery = keyboard.nextLine();
		 this.theQuery = this.theQuery.toLowerCase();
		 return this.theQuery;
	 }
	 
	 public void setQuery(String q){ this.theQuery = q;	 }
	 
	 
	 
	 
	 public int recognizeQuery(){
		 int typeOfQuery = 0; // Default 0 is an unrecognized query type
		 
		 
		 if(theQuery.matches("(?i)select.*") || theQuery.matches("(?i)show.*") || theQuery.matches("(?i)describe.*"))
			 typeOfQuery = 1; //The query returns a ResultSet
			 
		 
		 else if (theQuery.matches("(?i)insert.*") || theQuery.matches("(?i)update.*") || 
				  theQuery.matches("(?i)delete.*") || theQuery.matches("(?i)use.*"))
			 typeOfQuery = 2; // The query does not return a ResultSet. It just make an update
		 
		 else if(theQuery.matches("(?i)exit.*")){
			 typeOfQuery = 3; //Exit command
			 }
		 
		 if(typeOfQuery == 1 || typeOfQuery == 2){
		     try {
		    	 this.theStatement = this.theCoennection.prepareStatement(this.theQuery); }
		      catch (SQLException e) {
		         System.out.println(e.getMessage());
		         typeOfQuery = 0;
		         System.out.println("Unrecognized Query!");
		        }
		 }
		 return typeOfQuery;
	 }
	 
	 public void performQuery(){
	        try
	        {
	        	this.theResultSet = this.theStatement.executeQuery();
	        	this.resultSetMetadata = this.theResultSet.getMetaData();
	        	int numberOfColumns = this.resultSetMetadata.getColumnCount();
	        	//this.resultSetMetadata.
	        	String aRow="";
	        	//this.theResult = ""; //Clear the resulting string
	        	data.clear();
	        	colNames.clear();


        		for(int i=1; i<=numberOfColumns; ++i){
        			//aRow = aRow+ this.resultSetMetadata.getColumnName(i);
        			colNames.add(this.resultSetMetadata.getColumnName(i));
        			//if(i!=numberOfColumns) aRow = aRow +", \t";
        		}
        		//aRow +="\n";
	        	while (this.theResultSet.next()){
		        	ArrayList<String> oneRow = new ArrayList<String>(); 
	        		for(int i=1; i<=numberOfColumns; ++i){
	        			//aRow = aRow+ this.theResultSet.getString(i);
	        			oneRow.add(this.theResultSet.getString(i));
	        			//if(i!=numberOfColumns) aRow = aRow +", \t";
	        		}
	        		data.add(oneRow);
	        		//this.theResult += aRow+"\n";
	        		//System.out.println(aRow);
	        		//aRow = "";
	        	}
	        }
	        catch (SQLException e)
	        {
	          System.out.println("Query could not be executed!");
	        }
	        	
	        System.out.println(colNames);
	        for(int i = 0; i < data.size(); i++){
	        	System.out.println(data.get(i));
	        }
	        


	 	}
	 
	 public void performUpdate(){
     	data.clear();
     	colNames.clear();
	        try { 
	        	this.theStatement.executeUpdate();	
	        	System.out.println("Update was Successful!");	
	        	this.theResult = "Update was Successful!"; }
	        catch (SQLException e) {
	          System.out.println("Update could not be executed!");
	          this.theResult = "Update could not be executed!"; }
	 	}
	 
	 public void execute(){
		 int type = recognizeQuery();
		 if(type==1)
			 performQuery();
	 	
		 else if(type ==2)
			 performUpdate();		 
	 	}
	 
	 
	 public void createSession(){
		 /*
		 requestDatabaseInfoByParts();
		 this.dbURL = "jdbc:mysql://127.0.0.1:3316/openmrs";
		 this.username = "openmrs";
		 System.out.print("OpenMRS Password: ");
		 this.password = keyboard.nextLine();
		 */
		 
		 for(int x=0; x<this.Drivers.length; ++x){
			 loadDriver(this.Drivers[x]);
			 connect();
			 if(this.isConnected()) 
				 break;
			 if(x==this.Drivers.length-1)
				 System.out.println("connection could not be established!");
		 	}
	 	}
	 
	 
	 
	 /*
	   public static void main(String args[]){
		   DBconnection c = new DBconnection();
		   c.createSession();
		   }
	 
	 */
}


